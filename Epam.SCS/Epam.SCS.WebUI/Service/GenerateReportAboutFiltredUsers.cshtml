@using iTextSharp.text;
@using iTextSharp.text.pdf;
@using System.Text;
@using System.IO;
@using Epam.SCS.WebUI.Models;
@using Epam.SCS.Entities;
@using System.Linq;

@{
    var doc = new Document();
    string path = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "PDFs");
    PdfWriter.GetInstance(doc, new FileStream(Path.Combine(path, "Order_about_filtred_users.pdf"), FileMode.Create));
    PdfPTable table = new PdfPTable(3);


    string ttf = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.Fonts), "ARIAL.TTF");
    var baseFont = BaseFont.CreateFont(ttf, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED);
    var font = new Font(baseFont, iTextSharp.text.Font.DEFAULTSIZE, iTextSharp.text.Font.NORMAL);

    table.TotalWidth = 510f;
    //fix the absolute width of the table
    table.LockedWidth = true;

    //relative col widths in proportions - 1/3 and 2/3
    float[] widths = new float[] { 6f, 1f, 3f };
    table.SetWidths(widths);
    table.HorizontalAlignment = 0;
    //leave a gap before and after the table
    table.SpacingBefore = 20f;
    table.SpacingAfter = 30f;

    PdfPCell cell = new PdfPCell(new Phrase(new Chunk("Information about filtred users knowledge of accounting systems.", font)));
    cell.Colspan = 3;
    cell.Border = 0;
    cell.HorizontalAlignment = 1;
    table.AddCell(cell);


    table.AddCell("Name");
    table.AddCell("Age");
    table.AddCell("Skills");

    var users = Common.UserBll.GetAll();
    UsersEqualityComparer userComparer = new UsersEqualityComparer();
    SkillEqualityComprarer skillComparer = new SkillEqualityComprarer();
    users.AsQueryable();
    foreach (var skill in Common.FilterBll.GetAll())
    {
        var curSkill = Common.SkillBll.GetById(skill.Key);
        var query = users.Where(x => x.UsersSkills.Keys.Contains(curSkill, skillComparer))
                .Where(x => x.UsersSkills[curSkill] > skill.Value.MinValue)
                .Where(x => x.UsersSkills[curSkill] < skill.Value.MaxValue);

        users = users.Intersect(query, userComparer);

    }

    if (users.Count() > 0)
    {
        foreach (var user in users)
        {
            table.AddCell(new Phrase(new Chunk($"{user.Name}  {user.Surname}  {user.Patronymic}", font)));
            table.AddCell(user.Age.ToString());
            StringBuilder skillsStr = new StringBuilder();
            if (user.UsersSkills.Count == 0)
            {
                skillsStr.Append("The user has no skills");
            }
            else
            {
                foreach (var skill in user.UsersSkills)
                {
                    skillsStr.Append($"{skill.Key.Title} - {skill.Value} \r");
                }
            }
            table.AddCell(new Phrase(new Chunk(skillsStr.ToString(), font)));
        }
    }
    else
    {
        table.AddCell(new Phrase(new Chunk("empty", font)));
        table.AddCell(new Phrase(new Chunk("empty", font)));
        table.AddCell(new Phrase(new Chunk("empty", font)));
    }
    doc.Open();
    doc.Add(table);
    doc.Close();
    Response.Redirect("~/MainPage");
}

